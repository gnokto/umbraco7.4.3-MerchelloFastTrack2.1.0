//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.2.93
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Umbraco.ModelsBuilder;
using Umbraco.ModelsBuilder.Umbraco;

[assembly: PureLiveAssembly, System.Reflection.AssemblyVersion("0.0.0.1")]

namespace Umbraco.Web.PublishedContentModels
{
	/// <summary>Blog Post</summary>
	[PublishedContentModel("BlogPost")]
	public partial class BlogPost : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "BlogPost";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public BlogPost(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<BlogPost, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("content")]
		public Newtonsoft.Json.Linq.JToken Content
		{
			get { return this.GetPropertyValue<Newtonsoft.Json.Linq.JToken>("content"); }
		}

		///<summary>
		/// Introduction
		///</summary>
		[ImplementPropertyType("introduction")]
		public string Introduction
		{
			get { return this.GetPropertyValue<string>("introduction"); }
		}
	}

	/// <summary>Blog Post Repository</summary>
	[PublishedContentModel("BlogPostRepository")]
	public partial class BlogPostRepository : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "BlogPostRepository";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public BlogPostRepository(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<BlogPostRepository, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Hide in bottom navigation?
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return this.GetPropertyValue<bool>("umbracoNaviHide"); }
		}
	}

	/// <summary>Home</summary>
	[PublishedContentModel("Home")]
	public partial class Home : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Home";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Home(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Home, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("content")]
		public Newtonsoft.Json.Linq.JToken Content
		{
			get { return this.GetPropertyValue<Newtonsoft.Json.Linq.JToken>("content"); }
		}

		///<summary>
		/// Site Description
		///</summary>
		[ImplementPropertyType("siteDescription")]
		public string SiteDescription
		{
			get { return this.GetPropertyValue<string>("siteDescription"); }
		}

		///<summary>
		/// Site Logo
		///</summary>
		[ImplementPropertyType("siteLogo")]
		public object SiteLogo
		{
			get { return this.GetPropertyValue("siteLogo"); }
		}

		///<summary>
		/// Site Title
		///</summary>
		[ImplementPropertyType("siteTitle")]
		public string SiteTitle
		{
			get { return this.GetPropertyValue<string>("siteTitle"); }
		}
	}

	/// <summary>Landing Page</summary>
	[PublishedContentModel("LandingPage")]
	public partial class LandingPage : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "LandingPage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public LandingPage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<LandingPage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("content")]
		public Newtonsoft.Json.Linq.JToken Content
		{
			get { return this.GetPropertyValue<Newtonsoft.Json.Linq.JToken>("content"); }
		}

		///<summary>
		/// Hide in bottom navigation?
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return this.GetPropertyValue<bool>("umbracoNaviHide"); }
		}
	}

	/// <summary>Text Page</summary>
	[PublishedContentModel("TextPage")]
	public partial class TextPage : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "TextPage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public TextPage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<TextPage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("content")]
		public Newtonsoft.Json.Linq.JToken Content
		{
			get { return this.GetPropertyValue<Newtonsoft.Json.Linq.JToken>("content"); }
		}
	}

	// Mixin content Type 1103 with alias "compositionContent"
	/// <summary>Composition - Content</summary>
	public partial interface ICompositionContent : IPublishedContent
	{
		/// <summary>Brief</summary>
		IHtmlString Brief { get; }

		/// <summary>Headline</summary>
		string Headline { get; }
	}

	/// <summary>Composition - Content</summary>
	[PublishedContentModel("compositionContent")]
	public partial class CompositionContent : PublishedContentModel, ICompositionContent
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "compositionContent";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public CompositionContent(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<CompositionContent, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Brief: A brief description of the content
		///</summary>
		[ImplementPropertyType("brief")]
		public IHtmlString Brief
		{
			get { return GetBrief(this); }
		}

		/// <summary>Static getter for Brief</summary>
		public static IHtmlString GetBrief(ICompositionContent that) { return that.GetPropertyValue<IHtmlString>("brief"); }

		///<summary>
		/// Headline: The content headline
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return GetHeadline(this); }
		}

		/// <summary>Static getter for Headline</summary>
		public static string GetHeadline(ICompositionContent that) { return that.GetPropertyValue<string>("headline"); }
	}

	// Mixin content Type 1104 with alias "compositionMeta"
	/// <summary>Composition - Meta</summary>
	public partial interface ICompositionMeta : IPublishedContent
	{
		/// <summary>Meta Description</summary>
		string MetaDescription { get; }

		/// <summary>Page Title</summary>
		string PageTitle { get; }
	}

	/// <summary>Composition - Meta</summary>
	[PublishedContentModel("compositionMeta")]
	public partial class CompositionMeta : PublishedContentModel, ICompositionMeta
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "compositionMeta";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public CompositionMeta(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<CompositionMeta, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Meta Description: The META description content
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return GetMetaDescription(this); }
		}

		/// <summary>Static getter for Meta Description</summary>
		public static string GetMetaDescription(ICompositionMeta that) { return that.GetPropertyValue<string>("metaDescription"); }

		///<summary>
		/// Page Title: The HTML Page Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return GetPageTitle(this); }
		}

		/// <summary>Static getter for Page Title</summary>
		public static string GetPageTitle(ICompositionMeta that) { return that.GetPropertyValue<string>("pageTitle"); }
	}

	/// <summary>Basket</summary>
	[PublishedContentModel("basket")]
	public partial class Basket : PublishedContentModel, ICompositionMeta
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "basket";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Basket(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Basket, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Meta Description: The META description content
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return CompositionMeta.GetMetaDescription(this); }
		}

		///<summary>
		/// Page Title: The HTML Page Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return CompositionMeta.GetPageTitle(this); }
		}
	}

	/// <summary>Catalog</summary>
	[PublishedContentModel("catalog")]
	public partial class Catalog : PublishedContentModel, ICompositionContent, ICompositionMeta
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "catalog";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Catalog(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Catalog, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Categories
		///</summary>
		[ImplementPropertyType("categories")]
		public Merchello.Web.Models.Ui.Rendering.ProductCollection Categories
		{
			get { return this.GetPropertyValue<Merchello.Web.Models.Ui.Rendering.ProductCollection>("categories"); }
		}

		///<summary>
		/// Brief: A brief description of the content
		///</summary>
		[ImplementPropertyType("brief")]
		public IHtmlString Brief
		{
			get { return CompositionContent.GetBrief(this); }
		}

		///<summary>
		/// Headline: The content headline
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return CompositionContent.GetHeadline(this); }
		}

		///<summary>
		/// Meta Description: The META description content
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return CompositionMeta.GetMetaDescription(this); }
		}

		///<summary>
		/// Page Title: The HTML Page Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return CompositionMeta.GetPageTitle(this); }
		}
	}

	/// <summary>Category</summary>
	[PublishedContentModel("category")]
	public partial class Category : PublishedContentModel, ICompositionContent, ICompositionMeta
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "category";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Category(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Category, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Products: The product collection that represents this category
		///</summary>
		[ImplementPropertyType("products")]
		public Merchello.Web.Models.Ui.Rendering.ProductContentListView Products
		{
			get { return this.GetPropertyValue<Merchello.Web.Models.Ui.Rendering.ProductContentListView>("products"); }
		}

		///<summary>
		/// Brief: A brief description of the content
		///</summary>
		[ImplementPropertyType("brief")]
		public IHtmlString Brief
		{
			get { return CompositionContent.GetBrief(this); }
		}

		///<summary>
		/// Headline: The content headline
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return CompositionContent.GetHeadline(this); }
		}

		///<summary>
		/// Meta Description: The META description content
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return CompositionMeta.GetMetaDescription(this); }
		}

		///<summary>
		/// Page Title: The HTML Page Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return CompositionMeta.GetPageTitle(this); }
		}
	}

	// Mixin content Type 1108 with alias "CompositionUmbracoFields"
	/// <summary>Composition - Umbraco Fields</summary>
	public partial interface ICompositionUmbracoFields : IPublishedContent
	{
		/// <summary>Umbraco Internal Redirect ID</summary>
		object UmbracoInternalRedirectID { get; }

		/// <summary>Hide Page</summary>
		bool UmbracoNaviHide { get; }

		/// <summary>Umbraco Redirect</summary>
		object UmbracoRedirect { get; }

		/// <summary>Umbraco URL Alias</summary>
		string UmbracoUrlAlias { get; }

		/// <summary>Umbraco URL Name</summary>
		string UmbracoUrlname { get; }
	}

	/// <summary>Composition - Umbraco Fields</summary>
	[PublishedContentModel("CompositionUmbracoFields")]
	public partial class CompositionUmbracoFields : PublishedContentModel, ICompositionUmbracoFields
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "CompositionUmbracoFields";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public CompositionUmbracoFields(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<CompositionUmbracoFields, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Umbraco Internal Redirect ID: Add the umbracoInternalRedirectId property alias to your document type with a content picker and Umbraco will load the selected page’s content transparently; no url redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectID")]
		public object UmbracoInternalRedirectID
		{
			get { return GetUmbracoInternalRedirectID(this); }
		}

		/// <summary>Static getter for Umbraco Internal Redirect ID</summary>
		public static object GetUmbracoInternalRedirectID(ICompositionUmbracoFields that) { return that.GetPropertyValue("umbracoInternalRedirectID"); }

		///<summary>
		/// Hide Page: Adds the umbracoNaviHide property alias to your document type with a true/false selector.  The value indicates the whether or not the page should be hidden.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return GetUmbracoNaviHide(this); }
		}

		/// <summary>Static getter for Hide Page</summary>
		public static bool GetUmbracoNaviHide(ICompositionUmbracoFields that) { return that.GetPropertyValue<bool>("umbracoNaviHide"); }

		///<summary>
		/// Umbraco Redirect: Add the umbracoRedirect property alias to your document type with a content picker and you can then allow choose a node ID that you want the page to redirect to.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return GetUmbracoRedirect(this); }
		}

		/// <summary>Static getter for Umbraco Redirect</summary>
		public static object GetUmbracoRedirect(ICompositionUmbracoFields that) { return that.GetPropertyValue("umbracoRedirect"); }

		///<summary>
		/// Umbraco URL Alias: This property allows you to give the node multiple URLs using a textstring property. For example if we were to enter fasttrack,test/this-is-a-test this would resolve the following urls to the same page.    /fasttrack/  /test/this-is-a-test/
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return GetUmbracoUrlAlias(this); }
		}

		/// <summary>Static getter for Umbraco URL Alias</summary>
		public static string GetUmbracoUrlAlias(ICompositionUmbracoFields that) { return that.GetPropertyValue<string>("umbracoUrlAlias"); }

		///<summary>
		/// Umbraco URL Name: This property allows you to change the URL of the node without changing the name of the node/page you have created.
		///</summary>
		[ImplementPropertyType("umbracoURLName")]
		public string UmbracoUrlname
		{
			get { return GetUmbracoUrlname(this); }
		}

		/// <summary>Static getter for Umbraco URL Name</summary>
		public static string GetUmbracoUrlname(ICompositionUmbracoFields that) { return that.GetPropertyValue<string>("umbracoURLName"); }
	}

	/// <summary>Account</summary>
	[PublishedContentModel("account")]
	public partial class Account : PublishedContentModel, ICompositionContent, ICompositionMeta, ICompositionUmbracoFields
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "account";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Account(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Account, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Brief: A brief description of the content
		///</summary>
		[ImplementPropertyType("brief")]
		public IHtmlString Brief
		{
			get { return CompositionContent.GetBrief(this); }
		}

		///<summary>
		/// Headline: The content headline
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return CompositionContent.GetHeadline(this); }
		}

		///<summary>
		/// Meta Description: The META description content
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return CompositionMeta.GetMetaDescription(this); }
		}

		///<summary>
		/// Page Title: The HTML Page Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return CompositionMeta.GetPageTitle(this); }
		}

		///<summary>
		/// Umbraco Internal Redirect ID: Add the umbracoInternalRedirectId property alias to your document type with a content picker and Umbraco will load the selected page’s content transparently; no url redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectID")]
		public object UmbracoInternalRedirectID
		{
			get { return CompositionUmbracoFields.GetUmbracoInternalRedirectID(this); }
		}

		///<summary>
		/// Hide Page: Adds the umbracoNaviHide property alias to your document type with a true/false selector.  The value indicates the whether or not the page should be hidden.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return CompositionUmbracoFields.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Umbraco Redirect: Add the umbracoRedirect property alias to your document type with a content picker and you can then allow choose a node ID that you want the page to redirect to.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return CompositionUmbracoFields.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Umbraco URL Alias: This property allows you to give the node multiple URLs using a textstring property. For example if we were to enter fasttrack,test/this-is-a-test this would resolve the following urls to the same page.    /fasttrack/  /test/this-is-a-test/
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return CompositionUmbracoFields.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Umbraco URL Name: This property allows you to change the URL of the node without changing the name of the node/page you have created.
		///</summary>
		[ImplementPropertyType("umbracoURLName")]
		public string UmbracoUrlname
		{
			get { return CompositionUmbracoFields.GetUmbracoUrlname(this); }
		}
	}

	/// <summary>Checkout</summary>
	[PublishedContentModel("checkout")]
	public partial class Checkout : PublishedContentModel, ICompositionContent, ICompositionMeta, ICompositionUmbracoFields
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "checkout";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Checkout(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Checkout, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Checkout Stage
		///</summary>
		[ImplementPropertyType("checkoutStage")]
		public object CheckoutStage
		{
			get { return this.GetPropertyValue("checkoutStage"); }
		}

		///<summary>
		/// Brief: A brief description of the content
		///</summary>
		[ImplementPropertyType("brief")]
		public IHtmlString Brief
		{
			get { return CompositionContent.GetBrief(this); }
		}

		///<summary>
		/// Headline: The content headline
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return CompositionContent.GetHeadline(this); }
		}

		///<summary>
		/// Meta Description: The META description content
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return CompositionMeta.GetMetaDescription(this); }
		}

		///<summary>
		/// Page Title: The HTML Page Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return CompositionMeta.GetPageTitle(this); }
		}

		///<summary>
		/// Umbraco Internal Redirect ID: Add the umbracoInternalRedirectId property alias to your document type with a content picker and Umbraco will load the selected page’s content transparently; no url redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectID")]
		public object UmbracoInternalRedirectID
		{
			get { return CompositionUmbracoFields.GetUmbracoInternalRedirectID(this); }
		}

		///<summary>
		/// Hide Page: Adds the umbracoNaviHide property alias to your document type with a true/false selector.  The value indicates the whether or not the page should be hidden.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return CompositionUmbracoFields.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Umbraco Redirect: Add the umbracoRedirect property alias to your document type with a content picker and you can then allow choose a node ID that you want the page to redirect to.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return CompositionUmbracoFields.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Umbraco URL Alias: This property allows you to give the node multiple URLs using a textstring property. For example if we were to enter fasttrack,test/this-is-a-test this would resolve the following urls to the same page.    /fasttrack/  /test/this-is-a-test/
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return CompositionUmbracoFields.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Umbraco URL Name: This property allows you to change the URL of the node without changing the name of the node/page you have created.
		///</summary>
		[ImplementPropertyType("umbracoURLName")]
		public string UmbracoUrlname
		{
			get { return CompositionUmbracoFields.GetUmbracoUrlname(this); }
		}
	}

	/// <summary>Login</summary>
	[PublishedContentModel("login")]
	public partial class Login : PublishedContentModel, ICompositionContent, ICompositionMeta, ICompositionUmbracoFields
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "login";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Login(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Login, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Brief: A brief description of the content
		///</summary>
		[ImplementPropertyType("brief")]
		public IHtmlString Brief
		{
			get { return CompositionContent.GetBrief(this); }
		}

		///<summary>
		/// Headline: The content headline
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return CompositionContent.GetHeadline(this); }
		}

		///<summary>
		/// Meta Description: The META description content
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return CompositionMeta.GetMetaDescription(this); }
		}

		///<summary>
		/// Page Title: The HTML Page Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return CompositionMeta.GetPageTitle(this); }
		}

		///<summary>
		/// Umbraco Internal Redirect ID: Add the umbracoInternalRedirectId property alias to your document type with a content picker and Umbraco will load the selected page’s content transparently; no url redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectID")]
		public object UmbracoInternalRedirectID
		{
			get { return CompositionUmbracoFields.GetUmbracoInternalRedirectID(this); }
		}

		///<summary>
		/// Hide Page: Adds the umbracoNaviHide property alias to your document type with a true/false selector.  The value indicates the whether or not the page should be hidden.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return CompositionUmbracoFields.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Umbraco Redirect: Add the umbracoRedirect property alias to your document type with a content picker and you can then allow choose a node ID that you want the page to redirect to.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return CompositionUmbracoFields.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Umbraco URL Alias: This property allows you to give the node multiple URLs using a textstring property. For example if we were to enter fasttrack,test/this-is-a-test this would resolve the following urls to the same page.    /fasttrack/  /test/this-is-a-test/
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return CompositionUmbracoFields.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Umbraco URL Name: This property allows you to change the URL of the node without changing the name of the node/page you have created.
		///</summary>
		[ImplementPropertyType("umbracoURLName")]
		public string UmbracoUrlname
		{
			get { return CompositionUmbracoFields.GetUmbracoUrlname(this); }
		}
	}

	/// <summary>Product</summary>
	[PublishedContentModel("product")]
	public partial class Product : PublishedContentModel, ICompositionMeta
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "product";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Product(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Product, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Brief: A short description of the product.  Used in listings and info boxes.
		///</summary>
		[ImplementPropertyType("brief")]
		public IHtmlString Brief
		{
			get { return this.GetPropertyValue<IHtmlString>("brief"); }
		}

		///<summary>
		/// Description: The full description of the product.
		///</summary>
		[ImplementPropertyType("description")]
		public IHtmlString Description
		{
			get { return this.GetPropertyValue<IHtmlString>("description"); }
		}

		///<summary>
		/// Image: An image or photo representation of the product
		///</summary>
		[ImplementPropertyType("image")]
		public object Image
		{
			get { return this.GetPropertyValue("image"); }
		}

		///<summary>
		/// Related Products: Allows for relating products to this product.
		///</summary>
		[ImplementPropertyType("relatedProducts")]
		public string RelatedProducts
		{
			get { return this.GetPropertyValue<string>("relatedProducts"); }
		}

		///<summary>
		/// Meta Description: The META description content
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return CompositionMeta.GetMetaDescription(this); }
		}

		///<summary>
		/// Page Title: The HTML Page Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return CompositionMeta.GetPageTitle(this); }
		}
	}

	/// <summary>Receipt</summary>
	[PublishedContentModel("receipt")]
	public partial class Receipt : PublishedContentModel, ICompositionContent, ICompositionMeta, ICompositionUmbracoFields
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "receipt";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Receipt(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Receipt, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Brief: A brief description of the content
		///</summary>
		[ImplementPropertyType("brief")]
		public IHtmlString Brief
		{
			get { return CompositionContent.GetBrief(this); }
		}

		///<summary>
		/// Headline: The content headline
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return CompositionContent.GetHeadline(this); }
		}

		///<summary>
		/// Meta Description: The META description content
		///</summary>
		[ImplementPropertyType("metaDescription")]
		public string MetaDescription
		{
			get { return CompositionMeta.GetMetaDescription(this); }
		}

		///<summary>
		/// Page Title: The HTML Page Title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return CompositionMeta.GetPageTitle(this); }
		}

		///<summary>
		/// Umbraco Internal Redirect ID: Add the umbracoInternalRedirectId property alias to your document type with a content picker and Umbraco will load the selected page’s content transparently; no url redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectID")]
		public object UmbracoInternalRedirectID
		{
			get { return CompositionUmbracoFields.GetUmbracoInternalRedirectID(this); }
		}

		///<summary>
		/// Hide Page: Adds the umbracoNaviHide property alias to your document type with a true/false selector.  The value indicates the whether or not the page should be hidden.
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return CompositionUmbracoFields.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// Umbraco Redirect: Add the umbracoRedirect property alias to your document type with a content picker and you can then allow choose a node ID that you want the page to redirect to.
		///</summary>
		[ImplementPropertyType("umbracoRedirect")]
		public object UmbracoRedirect
		{
			get { return CompositionUmbracoFields.GetUmbracoRedirect(this); }
		}

		///<summary>
		/// Umbraco URL Alias: This property allows you to give the node multiple URLs using a textstring property. For example if we were to enter fasttrack,test/this-is-a-test this would resolve the following urls to the same page.    /fasttrack/  /test/this-is-a-test/
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return CompositionUmbracoFields.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// Umbraco URL Name: This property allows you to change the URL of the node without changing the name of the node/page you have created.
		///</summary>
		[ImplementPropertyType("umbracoURLName")]
		public string UmbracoUrlname
		{
			get { return CompositionUmbracoFields.GetUmbracoUrlname(this); }
		}
	}

	/// <summary>Store</summary>
	[PublishedContentModel("store")]
	public partial class Store : PublishedContentModel, ICompositionContent
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "store";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Store(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Store, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Featured Products: Renders products from the Featured Products collection
		///</summary>
		[ImplementPropertyType("featuredProducts")]
		public Merchello.Web.Models.Ui.Rendering.ProductContentListView FeaturedProducts
		{
			get { return this.GetPropertyValue<Merchello.Web.Models.Ui.Rendering.ProductContentListView>("featuredProducts"); }
		}

		///<summary>
		/// Store Name: The name of the store
		///</summary>
		[ImplementPropertyType("storeName")]
		public string StoreName
		{
			get { return this.GetPropertyValue<string>("storeName"); }
		}

		///<summary>
		/// Brief: A brief description of the content
		///</summary>
		[ImplementPropertyType("brief")]
		public IHtmlString Brief
		{
			get { return CompositionContent.GetBrief(this); }
		}

		///<summary>
		/// Headline: The content headline
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return CompositionContent.GetHeadline(this); }
		}
	}

	/// <summary>Folder</summary>
	[PublishedContentModel("Folder")]
	public partial class Folder : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Folder";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public Folder(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Folder, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Contents:
		///</summary>
		[ImplementPropertyType("contents")]
		public object Contents
		{
			get { return this.GetPropertyValue("contents"); }
		}
	}

	/// <summary>Image</summary>
	[PublishedContentModel("Image")]
	public partial class Image : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Image";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public Image(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Image, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Size
		///</summary>
		[ImplementPropertyType("umbracoBytes")]
		public string UmbracoBytes
		{
			get { return this.GetPropertyValue<string>("umbracoBytes"); }
		}

		///<summary>
		/// Type
		///</summary>
		[ImplementPropertyType("umbracoExtension")]
		public string UmbracoExtension
		{
			get { return this.GetPropertyValue<string>("umbracoExtension"); }
		}

		///<summary>
		/// Upload image
		///</summary>
		[ImplementPropertyType("umbracoFile")]
		public Umbraco.Web.Models.ImageCropDataSet UmbracoFile
		{
			get { return this.GetPropertyValue<Umbraco.Web.Models.ImageCropDataSet>("umbracoFile"); }
		}

		///<summary>
		/// Height
		///</summary>
		[ImplementPropertyType("umbracoHeight")]
		public string UmbracoHeight
		{
			get { return this.GetPropertyValue<string>("umbracoHeight"); }
		}

		///<summary>
		/// Width
		///</summary>
		[ImplementPropertyType("umbracoWidth")]
		public string UmbracoWidth
		{
			get { return this.GetPropertyValue<string>("umbracoWidth"); }
		}
	}

	/// <summary>File</summary>
	[PublishedContentModel("File")]
	public partial class File : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "File";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public File(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<File, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Size
		///</summary>
		[ImplementPropertyType("umbracoBytes")]
		public string UmbracoBytes
		{
			get { return this.GetPropertyValue<string>("umbracoBytes"); }
		}

		///<summary>
		/// Type
		///</summary>
		[ImplementPropertyType("umbracoExtension")]
		public string UmbracoExtension
		{
			get { return this.GetPropertyValue<string>("umbracoExtension"); }
		}

		///<summary>
		/// Upload file
		///</summary>
		[ImplementPropertyType("umbracoFile")]
		public object UmbracoFile
		{
			get { return this.GetPropertyValue("umbracoFile"); }
		}
	}

	/// <summary>Merchello Customer</summary>
	[PublishedContentModel("merchelloCustomer")]
	public partial class MerchelloCustomer : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "merchelloCustomer";
		public new const PublishedItemType ModelItemType = PublishedItemType.Member;
#pragma warning restore 0109

		public MerchelloCustomer(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<MerchelloCustomer, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// First name
		///</summary>
		[ImplementPropertyType("firstName")]
		public string FirstName
		{
			get { return this.GetPropertyValue<string>("firstName"); }
		}

		///<summary>
		/// Last name
		///</summary>
		[ImplementPropertyType("lastName")]
		public string LastName
		{
			get { return this.GetPropertyValue<string>("lastName"); }
		}

		///<summary>
		/// Is Approved
		///</summary>
		[ImplementPropertyType("umbracoMemberApproved")]
		public bool UmbracoMemberApproved
		{
			get { return this.GetPropertyValue<bool>("umbracoMemberApproved"); }
		}

		///<summary>
		/// Comments
		///</summary>
		[ImplementPropertyType("umbracoMemberComments")]
		public string UmbracoMemberComments
		{
			get { return this.GetPropertyValue<string>("umbracoMemberComments"); }
		}

		///<summary>
		/// Failed Password Attempts
		///</summary>
		[ImplementPropertyType("umbracoMemberFailedPasswordAttempts")]
		public string UmbracoMemberFailedPasswordAttempts
		{
			get { return this.GetPropertyValue<string>("umbracoMemberFailedPasswordAttempts"); }
		}

		///<summary>
		/// Last Lockout Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastLockoutDate")]
		public string UmbracoMemberLastLockoutDate
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastLockoutDate"); }
		}

		///<summary>
		/// Last Login Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastLogin")]
		public string UmbracoMemberLastLogin
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastLogin"); }
		}

		///<summary>
		/// Last Password Change Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastPasswordChangeDate")]
		public string UmbracoMemberLastPasswordChangeDate
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastPasswordChangeDate"); }
		}

		///<summary>
		/// Is Locked Out
		///</summary>
		[ImplementPropertyType("umbracoMemberLockedOut")]
		public bool UmbracoMemberLockedOut
		{
			get { return this.GetPropertyValue<bool>("umbracoMemberLockedOut"); }
		}

		///<summary>
		/// Password Answer
		///</summary>
		[ImplementPropertyType("umbracoMemberPasswordRetrievalAnswer")]
		public string UmbracoMemberPasswordRetrievalAnswer
		{
			get { return this.GetPropertyValue<string>("umbracoMemberPasswordRetrievalAnswer"); }
		}

		///<summary>
		/// Password Question
		///</summary>
		[ImplementPropertyType("umbracoMemberPasswordRetrievalQuestion")]
		public string UmbracoMemberPasswordRetrievalQuestion
		{
			get { return this.GetPropertyValue<string>("umbracoMemberPasswordRetrievalQuestion"); }
		}
	}

	/// <summary>Member</summary>
	[PublishedContentModel("Member")]
	public partial class Member : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Member";
		public new const PublishedItemType ModelItemType = PublishedItemType.Member;
#pragma warning restore 0109

		public Member(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Member, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Is Approved
		///</summary>
		[ImplementPropertyType("umbracoMemberApproved")]
		public bool UmbracoMemberApproved
		{
			get { return this.GetPropertyValue<bool>("umbracoMemberApproved"); }
		}

		///<summary>
		/// Comments
		///</summary>
		[ImplementPropertyType("umbracoMemberComments")]
		public string UmbracoMemberComments
		{
			get { return this.GetPropertyValue<string>("umbracoMemberComments"); }
		}

		///<summary>
		/// Failed Password Attempts
		///</summary>
		[ImplementPropertyType("umbracoMemberFailedPasswordAttempts")]
		public string UmbracoMemberFailedPasswordAttempts
		{
			get { return this.GetPropertyValue<string>("umbracoMemberFailedPasswordAttempts"); }
		}

		///<summary>
		/// Last Lockout Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastLockoutDate")]
		public string UmbracoMemberLastLockoutDate
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastLockoutDate"); }
		}

		///<summary>
		/// Last Login Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastLogin")]
		public string UmbracoMemberLastLogin
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastLogin"); }
		}

		///<summary>
		/// Last Password Change Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastPasswordChangeDate")]
		public string UmbracoMemberLastPasswordChangeDate
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastPasswordChangeDate"); }
		}

		///<summary>
		/// Is Locked Out
		///</summary>
		[ImplementPropertyType("umbracoMemberLockedOut")]
		public bool UmbracoMemberLockedOut
		{
			get { return this.GetPropertyValue<bool>("umbracoMemberLockedOut"); }
		}

		///<summary>
		/// Password Answer
		///</summary>
		[ImplementPropertyType("umbracoMemberPasswordRetrievalAnswer")]
		public string UmbracoMemberPasswordRetrievalAnswer
		{
			get { return this.GetPropertyValue<string>("umbracoMemberPasswordRetrievalAnswer"); }
		}

		///<summary>
		/// Password Question
		///</summary>
		[ImplementPropertyType("umbracoMemberPasswordRetrievalQuestion")]
		public string UmbracoMemberPasswordRetrievalQuestion
		{
			get { return this.GetPropertyValue<string>("umbracoMemberPasswordRetrievalQuestion"); }
		}
	}

}
